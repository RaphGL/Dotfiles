#!/bin/sh

# Sets up environment
RED='\033[0;31m'
GREEN='\u001b[32m'
BLUE='\u001b[36m'
NC='\u001b[0m' # No Color


main() {
	cd ~
    get_confirmation
    find_dotfiles_dir
    find_package_manager
    check_basic_dependencies
    setup_neovim
    setup_zsh
    setup_tmux
    deploy_dotfiles
}

check_basic_dependencies() {
    textblock "Checking and Installing basic dependencies"
    if [[ ! -x $(command -v stow) ]]
    then
        echo_blue "Stow is not installed. Proceeding with installation...\n"
        sh -c "${INSTALL_CMD} stow"
    else 
        echo Stow is installed.
    fi

    if [[ ! -x $(command -v git) ]]
    then
        echo_blue "Git is not installed. Proceeding with installation...\n"
        sh -c "${INSTALL_CMD} git"
    else
        echo Git is installed.
    fi

    if [[ ! -x $(command -v curl) ]]
    then
        echo_blue "Curl is not installed. Proceeding with installation...\n"
        sh -c "${INSTALL_CMD} curl"
    else
        echo Curl is installed.
    fi
}

get_confirmation() {
    textblock "You're setting up RaphGL's Dotfiles"
    echo "This is a script for deploying my dotfiles quickly on any system."
    echo_red "Backup your dotfiles before running this script. You might loose them!\n"

    echo_green "Do you want to continue? [y/N] "
    read -r CONTINUE_CONFIRMATION
    CONTINUE_CONFIRMATION=$(tr "[:upper:]" "[:lower:]" <<< "$CONTINUE_CONFIRMATION")
    if [[ "$CONTINUE_CONFIRMATION" == 'y' ]]
        then
            textblock "Starting setup. You will be asked a few questions..."
        else
            exit
    fi

    echo_blue "Do you want to setup NeoVim? [Y/n] "
    read -r NEOVIM_SETUP
    if [[ -z "$NEOVIM_SETUP" ]]
    then
        NEOVIM_SETUP="y"
    fi

    echo_blue "Do you want to setup Zsh? [Y/n] "
    read -r ZSH_SETUP
    if [[ -z "$ZSH_SETUP" ]]
    then
        ZSH_SETUP="y"
    fi

    echo_blue "Do you want to setup Tmux? [Y/n] "
    read -r TMUX_SETUP
    if [[ -z "$TMUX_SETUP" ]]
    then
        TMUX_SETUP="y"
    fi
}


# Makes colored echo functions
echo_blue() {
    echo -ne "${BLUE}$@${NC}"
}

echo_red() {
    echo -ne "${RED}$@${NC}"
}

echo_green() {
    echo -ne "${GREEN}$@${NC}"
}

# generates a textbox for important messages
textblock() {
  local s=("$@") b w
  for l in "${s[@]}"; do
    ((w<${#l})) && { b="$l"; w="${#l}"; }
  done
  tput setaf 3
  echo " -${b//?/-}-
| ${b//?/ } |"
  for l in "${s[@]}"; do
    printf '| %s%*s%s |\n' "$(tput setaf 4)" "-$w" "$l" "$(tput setaf 3)"
  done
  echo "| ${b//?/ } |
 -${b//?/-}-"
  tput sgr0
}


# Find dotfiles location and assign it to DOTFILES_FOLDER
find_dotfiles_dir() {
    if [[ ! -d "${HOME}/dotfiles" && ! -d "${HOME}/.dotfiles" && ! -d "${HOME}/Dotfiles" ]] 
    then
        echo_green "\nWhat would you like to call your dotfiles folder?\n"
        echo -n "1) Dotfiles(default)  2) dotfiles  3) .dotfiles  :  "
        read -r DOTFILES_FOLDER
        case "$DOTFILES_FOLDER" in
            2)
                DOTFILES_FOLDER="${HOME}/dotfiles"
                ;;
            3)
                DOTFILES_FOLDER="${HOME}/.dotfiles"
                ;;
            *) 
                DOTFILES_FOLDER="${HOME}/Dotfiles"
                ;;
        esac
                
        git clone https://github.com/RaphGL/Dotfiles.git "$DOTFILES_FOLDER"
    elif [[ -d "${HOME}/dotfiles" ]]
    then
        DOTFILES_FOLDER="${HOME}/dotfiles"
    elif [[ -d "${HOME}/.dotfiles" ]]
    then
        DOTFILES_FOLDER="${HOME}/.dotfiles"
    elif [[ -d "${HOME}/Dotfiles" ]] 
    then
        DOTFILES_FOLDER="${HOME}/Dotfiles"
    fi
}

find_package_manager() {
    if [[ -x "$(command -v dnf)" ]]
    then 
        INSTALL_CMD="sudo dnf -y install"
    elif [[ -x "$(command -v pacman)" ]]
    then
        INSTALL_CMD="yes | sudo pacman -S --needed"
    elif [[ -x "$(command -v apt)" ]]
    then
        INSTALL_CMD="sudo apt -y install"
    else
        echo_red "Warning: Could not find a supported package manager. No packages will be installed."
    fi
}


setup_neovim() {
    if [[ -e "${HOME}/.local/share/nvim/site/autoload/plug.vim" && -x $(command -v nvim) ]]
    then
        echo "NeoVim is already setup."
    elif [[ $(tr "[:upper:]" "[:lower:]" <<< "$NEOVIM_SETUP") == 'y' ]]
    then
        # Install vim-plug
        textblock "Setting up NeoVim"
        if [[ ! -x "$(command -v nvim)" ]]
        then
            sh -c "${INSTALL_CMD} neovim"
        fi
        curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

        pip install $(curl "https://raw.githubusercontent.com/RaphGL/Dotfiles/master/.lists/pip.list")
        npm install -g $(curl "https://raw.githubusercontent.com/RaphGL/Dotfiles/master/.lists/npm.list")
    fi

}


setup_zsh() {
    # Checks if Zsh should be setup
	textblock "Setting up Zsh"
	if [[ ! -x "$(command -v zsh)" ]]
	then
		sh -c "${INSTALL_CMD} zsh"
	fi
	mkdir -p ~/.zsh-plugins
	# Installs zsh extension and syntax highlighting
	echo_blue "Cloning Zsh-syntax-highlighting\n"
	git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.zsh-plugins/zsh-syntax-highlighting
	chsh -s /bin/zsh
}


setup_tmux() {
    # Checks if Tmux should be installed
    if [[ -e "${HOME}/.tmux/plugins/tpm" && -x $(command -v tmux) ]] 
    then
        echo "Tmux is already setup."
    elif [[ $(tr "[:upper:]" "[:lower:]" <<< $TMUX_SETUP) == 'y' ]]
    then
        textblock "Setting up Tmux"
        if [[ ! -x "$(command -v tmux)" ]]
        then
            sh -c "${INSTALL_CMD} tmux"
        fi
        git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    fi
}


deploy_dotfiles() {
    textblock "Deploying dotfiles"
    cd "$DOTFILES_FOLDER"
    mkdir -p .temp/
    mv -t .temp ./*.png ./*.md LICENSE COPYING
    stow --adopt ./*
    mv .temp/* "$DOTFILES_FOLDER"
    rmdir .temp/
    cd "$HOME"
    echo_green "** Dotfiles deployed! **\n"
}

main "$@"; exit
