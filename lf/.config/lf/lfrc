# Quick navigation
map gh cd ~
map gc cd ~/.config
map gD cd ~/Downloads
map gd cd ~/Documents
map gb cd ~/Documents/Books
map gp cd ~/Pictures
map gv cd ~/Videos
map gm cd ~/Music

set preview true
set color256 true
set drawbox true
set ignorecase true
set info size

# Fix Zsh word splitting
set shell zsh
set shellopts '-eu:--shwordsplit'
set ifs "\n"
set filesep "\n"  # default already

# spawn a separate process for the opened file
cmd open &{{
    setsid $OPENER $f
}}

# Drag and drop files
# dnd files one by one
cmd dragon %dragon-drag-and-drop -a $fx
# dnd all files it closes window after sucessful drop
cmd dragonall %dragon-drag-and-drop -x -a $fx

# Trash functions
cmd trash %trash-put $fx
map tt trash
cmd trash-empty %trash-empty
map te trash-empty
cmd trash-list %trash-list|less


# Fuzzy CD
cmd fcd ${{
  res="$(find . -maxdepth 3 | fzf --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# Archive functions
cmd extract ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f.zip" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

map az zip
map at tar
map ag targz
map ab tarbz2
map au extract

# Misc
cmd bulk-rename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

cmd paste &{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        rsync -av --ignore-existing --progress $list . \
        | stdbuf -i0 -o0 -e0 tr '\r' '\n' \
        | while read line; do
            lf -remote "send $id echo $line"
        done
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}
